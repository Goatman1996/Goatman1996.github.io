import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,b as o,f as p,o as i}from"./app-DuZ7cc5a.js";const r="/assets/PCSS-DWE9h839.png",n={};function s(l,e){return i(),t("div",null,[o(" more "),e[0]||(e[0]=p('<p>pcss</p><h2 id="shadow-mapping" tabindex="-1"><a class="header-anchor" href="#shadow-mapping"><span>Shadow Mapping</span></a></h2><p>阴影贴图</p><p>从光源出发，对场景进行一次渲染，只记录深度，生成阴影贴图<br> 在实际渲染中，根据framgment的世界坐标，经过light_vp转换得到shadow_coord 进而读取阴影贴图，得到阴影值</p><h3 id="缺陷-self-occlusion" tabindex="-1"><a class="header-anchor" href="#缺陷-self-occlusion"><span>缺陷 Self Occlusion</span></a></h3><p>自遮挡</p><ul><li>原因</li></ul><p>阴影贴图也是有分辨率限制的，而一个分辨率对应去区域，该区域的深度是同一个值，且该区域的深度值是该区域所有物体的深度值中的最小值，若该区域是一个平面，那么这个渲染这个平面时，只有最靠近光的一小部分，被认为是没有阴影的，而剩余部分则都会处于阴影中</p><ul><li>解决</li></ul><p>使用一个Shadow Bias 阴影容差。即在进行阴影的深度测试时，使用一个容差值，来避免自遮挡现象，误差小于bias的部分，不算在阴影中</p><ul><li>进一步解决</li></ul><p>可以发现，当光源完全垂直照射一个平面时，Self Occlusion现象是不存在的，所以对于Shadow Bias 的取值，可以根据光源与平面的夹角进行动态调整，即夹角越小，Bias越大</p><ul><li>非工业可用的学术级解决方案（题外话）</li></ul><p>Second-depth Shadow Mapping</p><p>使用最小和次小的深度的中间值来作为阴影判定深度。</p><p>在实时渲染中，开销过于大，不会再工业中采用</p><ul><li>自遮挡问题总结</li></ul><p>自遮挡问题，从来都没有一个完美的解决方案，通常的，是找到一个合适Bias和Slop，以做到合适的结果即可</p><h2 id="pcf" tabindex="-1"><a class="header-anchor" href="#pcf"><span>PCF</span></a></h2><p>Percentage closer filtering</p><p>阴影抗锯齿</p><p>就像素点对阴影贴图进行采样时，采7x7的阴影深度并进行平均，多重采样，模糊</p><h2 id="pcss" tabindex="-1"><a class="header-anchor" href="#pcss"><span>PCSS</span></a></h2><p>Percentage closer soft shadow</p><p>基本原理依然是使用PCF对阴影进行多重采样，但是Filter的大小是动态的，根据点与(面)光源所形成的锥体的范围</p><figure><img src="'+r+'" alt="PCSS" tabindex="0" loading="lazy"><figcaption>PCSS</figcaption></figure><ul><li>此处有点不理解</li></ul>',27))])}const h=a(n,[["render",s]]),m=JSON.parse('{"path":"/ComputerGraphics/Games202/Shadow.html","title":"Shadow","lang":"zh-CN","frontmatter":{"title":"Shadow","icon":"pen-to-square","date":"2025-08-28T00:00:00.000Z","isOriginal":true,"category":["图形学","Games202"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Shadow\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-08-28T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-28T07:25:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"羊男\\",\\"url\\":\\"https://goatman1996.github.io/\\"}]}"],["meta",{"property":"og:url","content":"https://goatman1996.github.io/ComputerGraphics/Games202/Shadow.html"}],["meta",{"property":"og:site_name","content":"羊男"}],["meta",{"property":"og:title","content":"Shadow"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-28T07:25:34.000Z"}],["meta",{"property":"article:published_time","content":"2025-08-28T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-28T07:25:34.000Z"}]]},"git":{"createdTime":1756365934000,"updatedTime":1756365934000,"contributors":[{"name":"廖小白","username":"","email":"Goatman914@gmail.com","commits":1}]},"readingTime":{"minutes":1.8,"words":541},"filePathRelative":"ComputerGraphics/Games202/Shadow.md","excerpt":""}');export{h as comp,m as data};
